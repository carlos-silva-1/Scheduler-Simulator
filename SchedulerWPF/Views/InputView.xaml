<Window x:Class="SchedulerWPF.Views.InputView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SchedulerWPF.Views" 
        xmlns:viewmodels="clr-namespace:SchedulerWPF.ViewModels" d:DataContext="{d:DesignInstance Type=viewmodels:InputViewModel}"
        mc:Ignorable="d"
        WindowStyle="None"
        Height="500" Width="800"
        Background="#000c1f" FontSize="18">
    <Window.Resources>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#008b8b"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#000c0c"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="RoundedButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="10" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    
    <Grid>

        <Grid.RowDefinitions>
            <RowDefinition Height="150"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="250"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <StackPanel>
            <TextBlock Text="Scheduling Algorithm" Margin="25 30 0 0"
                       Padding="15 0 0 0" Foreground="White"/>
            <ComboBox Height="30" Width="200" Margin="20 5"
                      ItemsSource="{Binding SchedulingAlgorithms}"
                      SelectedItem="{Binding SelectedSchedulingAlgorithm}"/>
        </StackPanel>

        <StackPanel Grid.Row="0" Grid.Column="1" Margin="20 0 0 0">
            <TextBlock Text="{Binding InputInfoText}" HorizontalAlignment="Left"
                       Margin="20 0 0 0" Foreground="White"/>
            <TextBox Text="{Binding NumberOfProcessesInput, Mode=TwoWay}" Width="300" Height="30"
                     HorizontalAlignment="Left" Visibility="{Binding NumberOfProcessesInputVisibility}"/>
            <Button x:Name="StartInput" Content="Start Input" Width="300" 
                    Height="30" HorizontalAlignment="Left" Visibility="{Binding StartInputBtnVisibility}"
                    Style="{DynamicResource RoundedButtonStyle}" Background="#003f3f"
                    Foreground="White" BorderThickness="0" Margin="0 5 0 0"/>
            <Button x:Name="FinishInput" Content="Finish Input" Width="300" 
                    Height="30" Margin="0 5 0 0" HorizontalAlignment="Left"
                    Background="#003f3f" Foreground="White" BorderThickness="0"
                    Style="{DynamicResource RoundedButtonStyle}"/>
        </StackPanel>
        
        <DataGrid Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2"
                  Margin="0 0 0 0" ItemsSource="{Binding Memory}"
                  CanUserAddRows="False" AutoGenerateColumns="False"
                  x:Name="InputDataGrid" Background="LightGray">
            <DataGrid.Columns>
                <DataGridTextColumn Header="ID" Binding="{Binding Path=ID}"/>
                <DataGridTextColumn Header="Arrival Time" Binding="{Binding Path=ArrivalTime}"/>
                <DataGridTextColumn Header="Service Time" Binding="{Binding Path=TotalServiceTime}"/>
                <DataGridTextColumn Header="IO Requests Types" Binding="{Binding IORequestTypes}"/>
                <DataGridTextColumn Header="IO Requests Times" Binding="{Binding IORequestTimes}"/>
            </DataGrid.Columns>
        </DataGrid>

    </Grid>
</Window>
